// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Posn, actionBox, allPlates, allQuestions, background, canvas, ctx, currentScore, cursor, draw, drawCenter, font, gameEnd, isCorrect, keysDown, lastKeys, leftSlap, leftStop, leftTable, left_answers, left_correct, line, loadContent, loadGerman, loadJapanese, loadPlates, loadSpanish, logo, madFace, newPress, plate, questionsToAsk, rightSlap, rightStop, rightTable, right_answers, right_correct, scoreboard, shuffle, slidingPlates, sushiSensei, sushiSensei2, sushiSensei3, sushiSensei4, sushiSensei5, thisKeys, update, winning;

  canvas = null;

  ctx = null;

  keysDown = [];

  Posn = (function() {
    function Posn(x, y) {
      this.x = x;
      this.y = y;
    }

    return Posn;

  })();


  /*
   */

  sushiSensei = null;

  sushiSensei2 = null;

  sushiSensei3 = null;

  sushiSensei4 = null;

  sushiSensei5 = null;

  leftSlap = null;

  rightSlap = null;

  leftTable = null;

  rightTable = null;

  actionBox = null;

  background = null;

  cursor = null;

  plate = null;

  scoreboard = null;

  logo = null;

  line = null;

  font = null;

  leftStop = false;

  rightStop = false;

  currentScore = 0;

  winning = false;

  gameEnd = false;

  left_correct = null;

  right_correct = null;

  left_answers = [];

  right_answers = [];

  allPlates = [new Plate(220, 30, -0.75, 2.25, 30, 220, null), new Plate(265, -120, -0.75, 2.25, 30, 220, null), new Plate(315, -270, -0.75, 2.25, 30, 220, null), new Plate(370, -420, -0.75, 2.25, 30, 220, null), new Plate(540, 30, 0.4, 2.25, 30, 540, null), new Plate(520, -120, 0.4, 2.25, 30, 540, null), new Plate(500, -270, 0.4, 2.25, 30, 540, null), new Plate(480, -420, 0.4, 2.25, 30, 540, null)];

  loadContent = function(callback) {
    return callback();
  };

  loadSpanish = function(callback) {
    return callback();
  };

  loadJapanese = function(callback) {
    return callback();
  };

  loadGerman = function(callback) {
    return callback();
  };

  newPress = function(key) {
    return thisKeys[key] && !lastKeys[key];
  };

  allQuestions = [];

  questionsToAsk = [];

  loadPlates = function() {
    var asking, b, i, indexes, question, rngNext4, tex, _i, _j, _k, _l, _len, _ref;
    if (questionsToAsk.length === 0) {
      leftStop = true;
      rightStop = true;
      gameEnd = true;
      return;
    }
    asking = questionsToAsk.pop();
    question = asking.question;
    left_correct = asking.left_answer;
    right_correct = asking.right_answer;
    left_answers = [];
    left_answers.push(asking.left_answer);
    _ref = asking.left_duds;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tex = _ref[_i];
      left_answers.push(tex);
    }
    shuffle(left_answers);
    for (i = _j = 0; _j <= 3; i = ++_j) {
      allPlates[i].plateContents = left_answers[i];
    }
    right_answers = [];
    indexes = (function() {
      var _k, _ref1, _results;
      _results = [];
      for (i = _k = 0, _ref1 = allQuestions.length - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
        _results.push(i);
      }
      return _results;
    })();
    shuffle(indexes);
    for (i = _k = 0; _k <= 3; i = ++_k) {
      allPlates[i + 4].plateContents = allQuestions[indexes[i]].right_answer;
    }
    b = false;
    for (i = _l = 0; _l <= 3; i = ++_l) {
      b || (b = allQuestions[indexes[i]].right_answer === asking.right_answer);
    }
    if (!b) {
      rngNext4 = Math.floor(Math.floor * 4);
      return allPlates[rngNext4 + 4].plateContents = asking.right_answer;
    }
  };

  shuffle = function(list) {
    var k, n, _ref, _results;
    n = list.length;
    _results = [];
    while (n > 1) {
      n--;
      k = Math.floor(Math.random() * (n + 1));
      _results.push((_ref = [list[n], list[k]], list[k] = _ref[0], list[n] = _ref[1], _ref));
    }
    return _results;
  };

  update = function() {
    var i, lastKeys, madFace, slidingAfter, slidingBefore, slidingPlates, thisKeys, _i, _ref;
    lastKeys = thisKeys;
    thisKeys = keysDown.slice(0);
    if (newPress(39)) {
      rightStop = !rightStop;
    }
    if (newPress(37)) {
      leftStop = !leftStop;
    }
    for (i = _i = 0, _ref = allPlates.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if ((!leftStop && i < 4) || (!rightStop && i >= 4)) {
        slidingBefore = slidingPlates > 0;
        slidingPlates = allPlates[i].updatePlates(slidingPlates);
        slidingAfter = slidingPlates > 0;
        if (slidingBefore && slidingAfter) {
          loadPlates();
        }
      }
    }
    if (leftStop && rightStop && !gameEnd) {
      winning = isCorrect();
      if (winning) {
        currentScore += 200;
        slidingPlates = 8;
        madFace = 0;
      } else {
        currentScore -= 100;
        madFace++;
      }
      leftStop = false;
      rightStop = false;
    }
    winning = isCorrect() && leftStop && rightStop;
    if (winning) {
      return currentScore += 200;
    }
  };

  slidingPlates = 0;

  madFace = 0;

  isCorrect = function() {
    var gotLeft, gotRight, p, _i, _j, _len, _len1, _ref, _ref1;
    gotLeft = false;
    gotRight = false;
    _ref = allPlates.slice(0, 4);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (p.in_zone && p.plateContents === left_correct) {
        gotLeft = true;
      }
    }
    _ref1 = allPlates.slice(4, 8);
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      p = _ref1[_j];
      if (p.in_zone && p.plateContents === right_correct) {
        gotRight = true;
      }
    }
    return gotLeft && gotRight;
  };

  lastKeys = [];

  thisKeys = [];

  drawCenter = function(img, posn, color) {};

  draw = function() {
    return console.log("Draw");
  };


  /*
   */

  window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
    return window.setTimeout(callback, 1000 / 60);
  };

  $(document).ready(function() {
    canvas = $('#canvas')[0];
    ctx = canvas.getContext('2d');
    $(document).keydown(function(evt) {
      return keysDown[evt.which] = true;
    });
    $(document).keyup(function(evt) {
      return delete keysDown[evt.which];
    });
    return loadContent(function() {
      var animloop;
      return (animloop = function() {
        requestAnimFrame(animloop);
        update();
        draw();
        return null;
      })();
    });
  });

}).call(this);
